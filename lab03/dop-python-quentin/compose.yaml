version: '3.8'



services:

  reverse-proxy:
    image: traefik:v2.10
    container_name: reverse-proxy
    command:
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    networks:
      - app-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    image: 
      "registry.gitlab.com/sinaf19/dop-python-quentin/frontend"
    labels:
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  backend:
    build:
      context: ./backend
    container_name: backend
    image: 
      "registry.gitlab.com/sinaf19/dop-python-quentin/backend"
    labels:
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.backend.middlewares=backend-stripprefix"
      - "traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api"
    depends_on:
      database:
        condition: service_healthy
        restart: true
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@database:5432/postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - app-network

  database:
    image: postgres:alpine
    container_name: database
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5


networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local